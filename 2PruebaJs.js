/* 
  Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una variable y para qu√© sirve? 
    R/ Espacio en memoria en el que se almacena informaci√≥n

¬øCu√°l es la diferencia entre declarar e inicializar una variable?
    R/Declarar: separar un espacio en memoria.
        let variable;
    Inicializar: Indicar que se almacenar√° informaci√≥n de dicho espacio en memoria
        variable = 'soy una variable';

¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
    Sumar numeros: realizar una operaci√≥n matematica,
        let sumar = 4+4 // 8
    concatenar: juntar dos o mas strings
        let concatenar = '4' + '4' // '44' 
¬øCu√°l operador me permite sumar o concatenar?
    El operador + 
2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:

Nombre -->const, string
Apellido -->const, string
Nombre de usuario en Platzi -->let, string
Edad -->const, number
Correo electr√≥nico -->const, string
Mayor de edad -->const, boolean
Dinero ahorrado -->let, number (float)
Deudas -->let, number (float)
3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.

4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:

Nombre completo (nombre y apellido)
    const nombre = 'Daniel ';
    const apellido = 'Guar√≠n';
    const nombreCompleto = nombre + apellido
Dinero real (dinero ahorrado menos deudas)
    let dinero = 50;
    let deudas = 10;
    let dineroReal = dinero - deuda;
Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n? 
    R/ parte de c√≥digo que calcula un valor o acci√≥n de forma independiente al resto del programa
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
    R/ Cuando tengo c√≥digo que es reiterativo en un programa
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
    R/ Par√°metros: variables que defino como requeridas dentro de una funci√≥n
       Argumentos: el valor que le indico a la variable establecida en la funci√≥n
    function hola(parametros) {
        console.log(`hola ${parametro}`);
    }
    hola(argumento);
2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";
console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

function fullNameAndNickn(name, lastname, nickname){
    console.log(`Mi nombre es ${name} ${lastname}, pero prefiero que me digas {$nickname}`)
}
fullNameAndNickn("Juan David", "Castro Gallego", "juandc");


Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una condicional? 
    R/ una instrucci√≥n o un grupo de estas, que se ejecutar√°n seg√∫n el resultado que se tenga
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
    R/if-else: Recorre una serie de instrucciones hasta finalizarlas.
      switch: Recorre los casos que uno ingrese, pero si el primer caso es el que cumple, este para el recorrido y sale.
      operadores ternarios: similar al if else
¬øPuedo combinar funciones y condicionales?
    R/ Si
Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:


switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

    R/
    const tipoDeSuscripcion = "Basic";
    if (tipoDeSuscripcion === 'Free'){
        console.log("Solo puedes tomar los cursos gratis");
    } else if (tipoDeSuscripcion === "Basic"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    } else if (tipoDeSuscripcion === "Expert") {
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    } else if (tipoDeSuscripcion === "ExpertPlus"){
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    } else {
        console.log('Lo sentimos, no contamos con ese tipo de suscripci√≥n');
    }
3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
        if (tipoDeSuscripcion === 'Free'){
        console.log("Solo puedes tomar los cursos gratis");
    }  if (tipoDeSuscripcion === "Basic"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    }  if (tipoDeSuscripcion === "Expert") {
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    }  if (tipoDeSuscripcion === "ExpertPlus"){
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    } 
Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays y un solo condicional. üòè

Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo? 
    R/ Serie de instrucciones que se repiten hasta cumplir una condici√≥n.
¬øQu√© tipos de ciclos existen en JavaScript?
    R/ 2 , for, con sus derivados y while con sus derivados
¬øQu√© es un ciclo infinito y por qu√© es un problema?
    R/ciclos cuya condici√≥n no se puede cumplir nunca, son un problema por que consumen todos los recursos del equipo y como su nombre lo indica, no paran.
¬øPuedo mezclar ciclos y condicionales?
    R/ Si
2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:

for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}
    R/
    let i = 0
    while ( i < 5) {
        console.log("El valor de i es: " + i);
        i++;
    }
for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}
    R/
    let i = 10
    while (i >=2) {
        console.log("El valor de i es: " + i);
        i--;
    }
3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

Pista: puedes usar la funci√≥n prompt de JavaScript.
    let suma = prompt('cuanto es 2 + 2: ');
    suma = Number(suma);
    while (suma != 4) {
        console.log('vuelve a intentarlo')
        suma = prompt('cuanto es 2 + 2: ');
        suma = Number(suma);
    }
    console.log('lo lograste!');

Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array? 
    R/ Espacio en memoria que puede almacenar una lista de informaci√≥n, representado por [], los cuales pueden ser Number, strg, objetos, booleans e incluso arrays dentro de arrays
¬øQu√© es un objeto? 
R/ Espacio en memoria que almacena key y keyvalues, representado por {}, los keyValue pueden ser Number, strg, objetos, booleans e incluso arrays
¬øCu√°ndo es mejor usar objetos o arrays?
    R/ Seg√∫n la necesidad y el tipo de proyecto a abordar, 
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
    R/ Si
2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
    R/ 
      cualquierArray = ['primer','segundo','tercero'];
      function recibe(array){
        console.log(array[0])
      }
    recibe(cualquierArray);

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

    R/
    cualquierArray = ['primer','segundo','tercero'];
    function recibe(array){
        for (dato of array) {
            console.log(dato)
        }
    }
    recibe(cualquierArray);

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
*/
cualquierArray = ['primer','segundo','tercero'];
    function recibe(array){
        for (dato of array) {
            console.log(dato)
        }
    }
    recibe(cualquierArray);